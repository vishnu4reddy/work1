name: Rebase Remaining PRs on Merge

on:
  push:
    branches:
      - main  # Trigger on main branch push (e.g., after merging a PR)

jobs:
  rebase:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Provide the token for authentication

      # Step 2: Set up Git with user info
      - name: Set up Git
        run: |
          git config user.name "vishnu4reddy"
          git config user.email "vishnu4reddy@users.noreply.github.com"

      # Step 3: Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          sudo apt-get install gh

      # Step 4: Debug the GitHub token permissions (This will print if the token is set correctly)
      - name: Debug the GitHub token permissions
        run: |
          echo "GH_TOKEN is set: ${{ secrets.GITHUB_TOKEN != '' }}"

      # Step 5: Get list of open PRs
      - name: Get list of open PRs
        id: pr_list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Pass the token explicitly to gh CLI
        run: |
          prs=$(gh pr list --state open --json number,headRefName --jq '.[] | "\(.number) \(.headRefName)"')
          echo "::set-output name=prs::$prs"
          echo "$prs"

      # Step 6: Rebase remaining PRs onto main branch
      - name: Rebase remaining PRs onto main branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prs=$(gh pr list --state open --json number,headRefName)
      
          # Loop through each open PR and rebase
          echo "$prs" | jq -c '.[]' | while IFS= read -r pr; do
            pr_number=$(echo "$pr" | jq -r '.number')
            pr_branch=$(echo "$pr" | jq -r '.headRefName')
      
            if [ -z "$pr_branch" ]; then
              echo "::error::Skipping PR #$pr_number because branch name is empty."
              continue
            fi
      
            echo "Rebasing PR #$pr_number ($pr_branch) onto main branch..."
      
            # Fetch the latest main and PR branch
            git fetch origin
      
            # Checkout the main branch and pull latest changes
            git checkout main
            git pull origin main
      
            # Checkout the PR branch and pull latest changes
            git checkout "$pr_branch"
            git pull origin "$pr_branch"
      
            # Ensure there are no uncommitted changes before rebasing
            if [ -n "$(git status --porcelain)" ]; then
              echo "::error::There are uncommitted changes in PR #$pr_number ($pr_branch). Please commit or stash them before proceeding."
              continue
            fi
      
            # Rebase the PR branch onto the latest main branch
            if git rebase origin/main; then
              echo "Rebasing of PR #$pr_number ($pr_branch) successful!"
      
              # Push the rebased PR branch
              git push origin "$pr_branch" --force-with-lease
              echo "Successfully pushed rebased PR #$pr_number ($pr_branch)."
            else
              echo "::error::Rebase failed for PR #$pr_number ($pr_branch)."
              git rebase --abort
            fi
          done
