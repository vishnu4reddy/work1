on:
  push:
    branches:
      - main  # Trigger on main branch push (e.g., after merging a PR)

jobs:
  rebase:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # Provide the token for authentication

      # Step 2: Set up Git with user info
      - name: Set up Git
        run: |
          git config user.name "vishnu4reddy"
          git config user.email "vishnu4reddy@users.noreply.github.com"

      # Step 3: Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          sudo apt-get install gh

      # Step 4: Get the list of open PRs
      - name: Get list of open PRs
        id: pr_list
        run: |
          prs=$(gh pr list --state open --json number,headRefName --jq '.[] | "\(.number) \(.headRefName)"')
          echo "PR List: $prs"
          echo "::set-output name=prs::$prs"  # Use this to pass the PR list to the next step

      # Step 5: Rebase remaining PRs onto the main branch
      - name: Rebase remaining PRs onto main branch
        run: |
          prs="${{ steps.pr_list.outputs.prs }}"
          
          # Loop through each open PR and rebase
          echo "$prs" | while IFS= read -r pr; do
            pr_number=$(echo "$pr" | awk '{print $1}')
            pr_branch=$(echo "$pr" | awk '{print $2}')
            
            if [ -z "$pr_branch" ]; then
              echo "::error::Skipping PR #$pr_number because branch name is empty."
              continue
            fi

            echo "Rebasing PR #$pr_number ($pr_branch) onto main branch..."

            # Fetch the latest main branch and the PR branch
            git fetch origin

            # Checkout the main branch and pull the latest changes
            git checkout main
            git pull origin main

            # Checkout the PR branch and pull the latest changes from the PR branch
            git checkout "$pr_branch"
            git pull origin "$pr_branch"

            # Ensure there are no uncommitted changes before rebasing
            if [ -n "$(git status --porcelain)" ]; then
              echo "::error::There are uncommitted changes in PR #$pr_number ($pr_branch). Please commit or stash them before proceeding."
              continue
            fi

            # Start the rebase process
            echo "Starting rebase of PR #$pr_number onto latest commit from main..."

            # Rebase the PR branch onto the latest commit from the main branch
            git rebase origin/main || {
              echo "::error::Rebase failed for PR #$pr_number. Trying to skip conflicting commits."

              # Keep skipping the conflicting commits until the rebase is successful
              while ! git rebase --skip; do
                echo "::warning::Skipping commit due to conflict. Trying again..."
              done
            }

            # After the rebase is successful, push the rebased PR
            echo "Rebasing of PR #$pr_number ($pr_branch) successful!"

            # Push the rebased PR to the remote
            git remote set-url origin https://x-access-token:${{ secrets.PAT_NAME }}@github.com/vishnu4reddy/work1.git
            git push origin "$pr_branch" --force-with-lease
            echo "Successfully pushed rebased PR #$pr_number ($pr_branch)."
          done
