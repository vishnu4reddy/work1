on:
  push:
    branches:
      - main

jobs:
  rebase:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Set up Git with user info
      - name: Set up Git
        run: |
          git config user.name "vishnu4reddy"
          git config user.email "vishnu4reddy@users.noreply.github.com"

      # Step 3: Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          sudo apt-get install gh

      # Step 4: Get list of open PRs
      - name: Get list of open PRs
        id: pr_list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prs=$(gh pr list --state open --json number,headRefName --jq '.[] | "\(.number) \(.headRefName)"')
          echo "::set-output name=prs::$prs"
          echo "$prs"

      # Step 5: Rebase remaining PRs onto main branch
      - name: Rebase remaining PRs onto main branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prs=$(gh pr list --state open --json number,headRefName --jq '.[] | "\(.number) \(.headRefName)"')
          
          # Loop through each open PR and rebase onto main
          echo "$prs" | while IFS= read -r pr; do
            pr_number=$(echo "$pr" | jq -r '.number')
            pr_branch=$(echo "$pr" | jq -r '.headRefName')

            # If no branch name, skip the PR
            if [ -z "$pr_branch" ]; then
              echo "::error::Skipping PR #$pr_number because branch name is empty."
              continue
            fi

            # Fetch the latest main branch and the PR branch
            git fetch origin

            # Checkout the main branch and pull the latest changes
            git checkout main
            git pull origin main

            # Checkout the PR branch and pull the latest changes
            git checkout "$pr_branch"
            git pull origin "$pr_branch"

            # Check if PR is already up-to-date with main
            if git merge-base --is-ancestor origin/main "$pr_branch"; then
              echo "PR #$pr_number is already up-to-date with main. Skipping rebase."
              continue
            fi

            # Start rebase process
            echo "Starting rebase of PR #$pr_number onto latest commit from main..."

            # Attempt to rebase the PR branch onto the latest commit of main
            git rebase origin/main
            rebase_status=$?

            # If rebase fails, we will skip this PR and continue with the next one
            if [ $rebase_status -ne 0 ]; then
              echo "::error::Rebase failed for PR #$pr_number due to conflicts. Skipping this PR."
              git rebase --abort
              continue
            fi

            # After successful rebase, push the rebased PR
            echo "Rebasing of PR #$pr_number successful!"
            git push origin "$pr_branch" --force-with-lease
            echo "Successfully pushed rebased PR #$pr_number."

          done
